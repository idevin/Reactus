<?php


namespace App\Models\Helpers;

use App\Utils\Collection;
use App\Utils\CollectionHelper;
use App\Utils\Registry as Registry;

class Model extends CollectionHelper
{
    protected static $collection;
    protected static string $collectionClassname;

    protected static array $loadable = [];

    public static function addLoadable($fieldName)
    {
        static::$loadable[] = $fieldName;
    }

    public static function where($key, $value)
    {
        return static::getWhere($key, $value);
    }

    public static function isEmpty()
    {
        return static::getCollection()->isEmpty();
    }

    public static function first()
    {
        return static::getCollection()->first();
    }

    public static function collectAs(array $array, $className, array $params = [])
    {
        $class = self::newClass($className);

        if (isset($params['loadable'])) {
            $class::setLoadable($params['loadable']);
        }

        return Registry::set($className, static::collectWithLoadable($array));
    }

    public static function collectWithLoadable($array)
    {
        $debugKey = 0;
        $collection = static::collect($array);
        if (@$array[0]['module_id']) {
            $debugKey = 1;
        }
        foreach (static::getLoadable() as $loadable) {
            foreach ($collection as $i => $collectionItem) {

                if (isset($array[$i][$loadable]) && is_array($array[$i][$loadable])) {
                    /*                    if (is_array($collectionItem)) {
                                            $collection = static::getCollection();
                                        }*/
                    $collectionItem->{$loadable} = new Collection($array[$i][$loadable]);
                }

            }
        }
        return static::getCollection();
    }

    public static function getLoadable()
    {
        return static::$loadable;
    }

    public static function setLoadable(array $loadable)
    {
        static::$loadable = $loadable;
    }

    public static function _new($array = null)
    {
        return parent::_new($array); // TODO: Change the autogenerated stub
    }

    public static function get($name)
    {
        return self::getCollectionProperty($name);
    }

    public static function getCollectionProperty($name)
    {
        $collection = static::getCollection();
        return isset($collection->$name) ? $collection->$name : null;
    }

    public static function getModelClass($className)
    {
        return class_exists($className) ? $className : null;
    }

}